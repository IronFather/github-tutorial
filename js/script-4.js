// CALLBACK - функция обратного (отложенного вызова)
// ДЛЯ ВЫПОЛНЕНИЯ КОДА ПО УСЛОВИЮ

// функции можно передавать в параметры другой функции (как ссылка)
// функция высшего порядка - функция которая принимает другую функцию как параметр

// в параметрах функции высшего порядка обозначаем callback для ссылки на callback-функцию
// callback-функция создается отдельно и передается в параметры (callback) как аргумент через вызов функции высшего порядка

// ========================================================================================

// const fnA = function (message, callback) {
//     console.log(callback);
//     callback(100);
// };

// const fnB = function (number) {
//     console.log(`etbbbr:`, number);
// }

// fnA (`rregtgt`, fnB)

// ======================================================================================

// const doMath = function (a, b, callback) {
//     const result = callback(a, b);

//     console.log(result);
// }

// const addMath = function (x, y) {
//     return x + y;
// }

// const subMath = function (x, y) {
//     return x - y;
// }

// doMath (1235, 4326, addMath);
// doMath (765, 349, subMath);

// ======================================================================================


// // ИНЛАЙН CALLBACK ФУНКЦИЯ (еще называют АНОНИМНОЙ так как без const имени) - по сути для одноразового использования

// const doMath = function (a, b, callback) {
//     const result = callback(a, b);

//     console.log(result);
// }

// doMath (1235, 4326, function (x, y) {
//     return x + y
// });
// doMath (765, 349, function (x, y) {
//     return x - y
// });

// ======================================================================================

// функции высшего порядка могут быть без возврата когда возврат вынесен в колбеках через логирование











// ПЕРЕБИРАЮЩИЕ МЕТОДЫ

// =================================================================================================

// // map()
// const planets = ["Земля", "Марс", "Венера", "Юпитер"];

// const planetsInUpperCase = planets.map(planet => planet.toUpperCase());
// console.log(planetsInUpperCase); // ['ЗЕМЛЯ', 'МАРС', 'ВЕНЕРА', 'ЮПИТЕР']

// const planetsInLowerCase = planets.map(planet => planet.toLowerCase());
// console.log(planetsInLowerCase); // ['земля', 'марс', 'венера', 'юпитер']

// // Оригинальный массив не изменился
// console.log(planets); // ['Земля', 'Марс', 'Венера', 'Юпитер']

// // ЗАДАЧА ИЗ МАССИВА ОБЪЕКТОВ ВЫТЯНУТЬ МАССИВ ЗНАЧЕНИЙ СВОЙСТВА ИЗ ВСЕХ ОБЪЕКТОВ

// const students = [
//     { name: "Манго", score: 83 },
//     { name: "Поли", score: 59 },
//     { name: "Аякс", score: 37 },
//     { name: "Киви", score: 94 },
//     { name: "Хьюстон", score: 64 },
//   ];
  
//   const names = students.map(student => student.name);
//   console.log(names); // ['Манго', 'Поли', 'Аякс', 'Киви', 'Хьюстон']

// =================================================================================================

// flatMap()

// // ЗАДАЧА
// // В массиве `students` хранится список студентов со списком предметов 
// // которые посещает студент в свойстве `courses`. Несколько студентов могут 
// // посещать один и тот же предмет. Необходимо составить список всех предметов
// //  которые посещает эта группа студентов, пока даже повторяющихся.


// const students = [
//     { name: "Манго", courses: ["математика", "физика"] },
//     { name: "Поли", courses: ["информатика", "математика"] },
//     { name: "Киви", courses: ["физика", "биология"] },
//   ];
  
//   students.map(student => student.courses);
//   // [['математика', 'физика'], ['информатика', 'математика'], ['физика', 'биология']]
  
//   students.flatMap(student => student.courses);
//   // ['математика', 'физика', 'информатика', 'математика', 'физика', 'биология'];

// =================================================================================================
